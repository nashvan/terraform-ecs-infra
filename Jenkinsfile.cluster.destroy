#!/usr/lib/env groovy
@Library('common-library') _

pipeline {
	agent {label 'deploy'}
	options {
        ansiColor('xterm')
        disableConcurrentBuilds()
	}
    
    parameters {
         choice(name: 'EnvironmentName', choices: ['dev', 'sit', 'ppte', 'prod'], description: 'Environment Type')
    }
    stages {
        stage('Prepare') {
            steps {
                script {
                    // Setup Env variables here
                    env.ENVIRONMENT = params.EnvironmentName
                    load "./env.groovy"
                }
            }
        }
        stage('Check Infrastructure changes') {
            steps {
                echo "Checking Infrastructure changes"
                sshagent(credentials: ['svc-account']) {
                    script {
                        env.PLAN_FILE_NAME = "terraform.plan"
                        sh """
                        echo '1' | TF_WORKSPACE=${env.ENVIRONMENT} \
                        terraform init \
                        -reconfigure \
                        -backend-config "bucket=${env.BUCKET_NAME}" \
                        -backend-config "dynamodb_table=${env.DYNAMODB_TABLE}" \
                        -backend-config "key=${env.KEY}"
                        """
                        sh """terraform workspace select ${env.ENVIRONMENT} || terraform workspace new ${env.ENVIRONMENT}"""

                        input "Do you really want to destroy?"
                        
                        sh """
                        terraform destroy \
                        -var "environment=${env.ENVIRONMENT}" \
                        -var "app_name=${env.APP_NAME}" \
                        -auto-approve
                        """
                    }
                }
            }
        }
    }

    post {
        cleanup {
            cleanWs()
        }
    }
}
